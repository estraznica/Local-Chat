import React, { useState } from 'react';

export interface IMessage {
  id: number;
  value: string | IMessageImg;
  userName: string;
}
interface IMessageImg {
  src: string;
}
export function useSessions() {
  //–ø–æ–ª—É—á–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–º–Ω–∞—Ç—É –∏–∑ sessionStorage
  const savedUserName = String(sessionStorage.key(0));
  const savedRoom = String(sessionStorage.getItem(String(savedUserName)));
  //–ø–æ–ª—É—á–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ localStorage
  const messagesJSON = localStorage.getItem(String(savedRoom));
  //–ø–∞—Ä—Å—é –∏—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
  const saveMessages = messagesJSON ? JSON.parse(messagesJSON) : [];

  //–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const [gotImage, setGotImage] = React.useState(false);
  const [image, setImage] = React.useState('');
  const [tooBigImage, setTooBigImage] = React.useState(false);

  const addImageHandler = function () {
    const input = document.getElementById('imageInput') as HTMLInputElement;
    const file = input.files ? input.files[0] : null;
    if (file) {
      const maxSizeInBytes = 300 * 1024; // 300KB, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –Ω–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–∏—Ç—å localStorage
      if (file.size <= maxSizeInBytes) {
        const reader = new FileReader();
        reader.onload = function (event: ProgressEvent<FileReader>) {
          const imageData = event.target?.result;
          setImage(String(imageData));
          setGotImage(true);
          setTooBigImage(false);
        };
        reader.readAsDataURL(file);
      } else {
        setTooBigImage(true);
      }
    }
  };
  //–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∂–∏ –≤ —Ç–µ–∫—Å—Ç
  const [showed, setShowed] = React.useState(false);
  const showEmoji = function () {
    setShowed((prev) => !prev);
  };

  let emojies = ['üòÄ', 'üòÜ', 'üòÖ', 'ü§£', 'üôÇ', 'üôÉ', 'ü•∞'];
  const handleEmojiClick = function (i: number) {
    setValueMessage(valueMessage + emojies[i]);
  };
  //–µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∏–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  const handleTooBigImage = () => {
    setTooBigImage((prev) => !prev);
  };

  //–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleSubmit = (event: React.FormEvent<HTMLButtonElement>) => {
    //–µ—Å–ª–∏ –¥–æ–±–∞–≤–∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if (image) {
      const newMessage = {
        id: Date.now(),
        userName: savedUserName,
        value: { src: image },
      };
      saveMessages.push(newMessage);
      localStorage.setItem(savedRoom, JSON.stringify(saveMessages));
      setGotImage(false);
      setImage('');
    }
    if (valueMessage.trim().length === 0) {
      event.preventDefault();
    } else {
      //—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ localStorage –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
      const newMessage = { id: Date.now() + 1, userName: savedUserName, value: valueMessage };
      saveMessages.push(newMessage);
      localStorage.setItem(savedRoom, JSON.stringify(saveMessages));
    }
    if (localStorage.getItem(String(savedUserName)) !== savedRoom) {
      setError('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞');
    }
    setValueMessage('');
    event.preventDefault();
  };

  const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {
    setValueMessage((event.target as HTMLInputElement).value);
  };
  const [error, setError] = useState('');
  const [valueMessage, setValueMessage] = useState('');

  return {
    changeHandler,
    handleSubmit,
    setValueMessage,
    addImageHandler,
    setTooBigImage,
    handleEmojiClick,
    handleTooBigImage,
    showEmoji,
    emojies,
    gotImage,
    tooBigImage,
    valueMessage,
    showed,
    error,
  };
}
